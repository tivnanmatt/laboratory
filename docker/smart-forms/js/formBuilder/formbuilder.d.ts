declare var smartDonationsIsDesignMode: boolean;
declare var SmartFormsFieldIsAvailable: (fieldName: any) => boolean;
declare let RedNaoSmartFormLicenseIsValid: boolean;
declare let smartFormsAdditionalFields0: any;
declare class RedNaoFormBuilder {
    formSettings: JQuery;
    redNaoWindow: JQuery;
    formSettingsOriginalTop: number;
    RedNaoFormElements: sfFormElementBase<any>[];
    scrollTimeOut: any;
    propertiesPanel: JQuery;
    extensions: any[];
    FormBuilderDisabled: boolean;
    Conditions: any[];
    MultipleStepsDesigner: SfMultipleStepsDesigner;
    FormType: 'nor' | 'sec';
    StyleEditor: any;
    SfConditionalLogicManager: SfConditionalLogicManager;
    DragManager: RedNaoDragManager;
    constructor(smartFormsOptions: any, formElementsOptions: any, formClientOptions: any);
    FormTypeChanged(): void;
    InitializeSplitFormIfNeeded(clientOptions: any): void;
    InitializeStepDesigner(options: any): void;
    AddFieldInPosition(formElement: any, target: any): void;
    MoveFieldInPosition(formElement: any, target: any): void;
    GetFormElementByContainer(container: any): sfFormElementBase<any>;
    RecreateExistingFormIfAny(elementOptions: any, fieldServerOptions: any): void;
    CreateFormPreview(): void;
    OpenProperties(element: any): void;
    FillPropertiesPanel(element: any): void;
    CreateNewInstanceOfElement(element: any): any;
    GetComponentType(element: any): any;
    InitializeTabs(): void;
    InitializeComponents(): void;
    GetFormInformation(): any[];
    Disable(): void;
    Enable(): void;
    ScrollSettings(): void;
    CloneFormElement(jQueryElement: any): void;
    ElementClicked(jQueryElement: any): void;
    EditStyle(jQueryElement: any): void;
    DeleteFormElement(jQueryElement: any): void;
    GetMultipleStepsOptions(): {};
}
