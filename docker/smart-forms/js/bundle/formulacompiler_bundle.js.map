{"version":3,"sources":["webpack:///webpack/bootstrap 303c64633c150bc2145a","webpack:///./formBuilder/formula/formulaCompiler/FormulaCompiler.ts","webpack:///./formBuilder/formula/formulaCompiler/Parser.ts","webpack:///./formBuilder/formula/formulaCompiler/Lexer.ts","webpack:///./formBuilder/formula/formulaCompiler/Token.ts"],"names":[],"mappings":"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","file":"./Bundle/formulacompiler_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 303c64633c150bc2145a","import {Parser} from \"./Parser\";\r\n\r\nexport class FormulaCompiler{\r\n    private parser:Parser;\r\n\r\n    constructor(public stringToProcess:string){\r\n        this.parser=new Parser(this.stringToProcess);\r\n    }\r\n\r\n    public Compile():string{\r\n        return this.parser.Parse();\r\n    }\r\n\r\n\r\n}\r\n\r\n(window as any).FormulaCompiler=FormulaCompiler;\n\n\n// WEBPACK FOOTER //\n// ./formBuilder/formula/formulaCompiler/FormulaCompiler.ts","import {Lexer, TokenType} from \"./Lexer\";\r\nimport {Token} from \"./Token\";\r\nimport {NodeBase} from \"./Nodes/NodeBase\";\r\nimport {BinaryNode} from \"./Nodes/BinaryNode\";\r\nimport {WhateverNode} from \"./Nodes/WhateverNode\";\r\nimport {MethodNode} from \"./Nodes/MethodNode\";\r\nimport {SubExpressionNode} from \"./Nodes/SubExpressionNode\";\r\n/*\r\nexpr:(Method|String|Whatever)*\r\nmethod:Remote.Get lparen (expr |,expr) rparent;\r\nString: \"|` cadena \"|\r\nwhatever:todo lo que not tenga espacios\r\n */\r\nexport class Parser{\r\n    private lexer:Lexer;\r\n    private currentToken:Token;\r\n    private code:string='';\r\n    private header:string='';\r\n    private footer:string='';\r\n    private topCode:string;\r\n    private variableCount:number=0;\r\n    constructor(public stringToProcess:string){\r\n        this.lexer=new Lexer(this.stringToProcess);\r\n        this.currentToken=this.lexer.GetNextToken();\r\n    }\r\n\r\n    public eat(tokenType:TokenType)\r\n    {\r\n        if(this.currentToken.Type!=tokenType)\r\n            throw (\"Invalid Formula\");\r\n        else\r\n            this.currentToken=this.lexer.GetNextToken();\r\n    }\r\n\r\n    Parse() {\r\n        return this.Expr();\r\n    }\r\n\r\n    public Expr(): string {\r\n        while(this.currentToken!=null)\r\n        {\r\n            if(this.currentToken.Type!=TokenType.Method)\r\n            {\r\n                this.code+=this.currentToken.Value;\r\n            }else\r\n                this.code+=this.Method();\r\n            this.eat(this.currentToken.Type);\r\n        }\r\n        return this.CreateRootPromise();\r\n\r\n    }\r\n\r\n    public Method(){\r\n        let methodCode=this.currentToken.Value;\r\n        this.eat(TokenType.Method);\r\n        let parenthesesCount=-1;\r\n        while(this.currentToken!=null&&(this.currentToken.Type!=TokenType.RParen||parenthesesCount>0))\r\n        {\r\n            if((this.currentToken as any).Type==TokenType.RParen)\r\n                parenthesesCount--;\r\n            if(this.currentToken.Type==TokenType.LParen)\r\n                parenthesesCount++;\r\n           if(this.currentToken.Type==TokenType.Method)\r\n               methodCode+=this.Method();\r\n           else\r\n               methodCode+=this.currentToken.Value;\r\n\r\n           this.eat(this.currentToken.Type);\r\n        }\r\n        methodCode+=')';\r\n\r\n\r\n        let variableName='result'+this.variableCount;\r\n        this.header+=`${methodCode}.then(function(${variableName}){`;\r\n        this.variableCount++;\r\n        this.footer+='})';\r\n        return variableName;\r\n    }\r\n\r\n\r\n/*\r\n    public SubExpr():NodeBase{\r\n        let token = this.currentToken;\r\n        let node = null;\r\n\r\n        let newNode = null;\r\n        if (token.Type == TokenType.Method) {\r\n            newNode = this.Method();\r\n        }\r\n        else if(token.Type==TokenType.LParen)\r\n        {\r\n            this.eat(TokenType.LParen);\r\n            newNode=new SubExpressionNode();\r\n            newNode.SubExpr=this.SubExpr();\r\n            this.eat(TokenType.RParen);\r\n        }else if(token.Type==TokenType.RParen)\r\n            return null;\r\n        else\r\n            newNode = this.Whatever();\r\n\r\n        return newNode;\r\n    }\r\n\r\n    private Method():NodeBase {\r\n        let methodNode=new MethodNode();\r\n        methodNode.MethodToken=this.currentToken;\r\n        this.eat(TokenType.Method);\r\n        this.eat(TokenType.LParen);\r\n        methodNode.SubExpr=this.SubExpr();\r\n        this.eat(TokenType.RParen);\r\n        return methodNode;\r\n\r\n    }\r\n\r\n\r\n\r\n    private Whatever():NodeBase {\r\n        let whateverNode: WhateverNode = new WhateverNode();\r\n\r\n        while (true) {\r\n            if (this.currentToken.Type == TokenType.Method || this.currentToken == null||this.currentToken.Type==TokenType.RParen)\r\n                break;\r\n\r\n            if(this.currentToken.Type==TokenType.LParen)\r\n            {\r\n                return new BinaryNode(whateverNode,this.SubExpr());\r\n            }\r\n\r\n            whateverNode.ChildTokens.push(this.currentToken);\r\n            this.eat(this.currentToken.Type);\r\n        }\r\n\r\n        return whateverNode;\r\n    }*/\r\n    private CreateRootPromise() {\r\n        return `new Promise(function(sfInternalResolve){\r\n            ${this.header}\r\n                sfInternalResolve(${this.code});\r\n            ${this.footer}\r\n        });`\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./formBuilder/formula/formulaCompiler/Parser.ts","\r\nimport {Token} from \"./Token\";\r\n\r\nexport class Lexer{\r\n    public currentIndex:number;\r\n    public stringBuffer:string='';\r\n    constructor(public stringToProcess:string)\r\n    {\r\n        this.currentIndex=-1;\r\n    }\r\n    public GetNextToken(){\r\n        this.currentIndex++;\r\n        if(this.stringToProcess.length<=this.currentIndex)\r\n            return this.AnalizeToken();\r\n\r\n        let currentChar=this.stringToProcess[this.currentIndex];\r\n\r\n\r\n        if(this.IsWhiteSpace(currentChar))\r\n        {\r\n            if(this.stringBuffer.length>0) {\r\n                this.currentIndex--;\r\n                return this.AnalizeToken();\r\n            }\r\n            else {\r\n                this.stringBuffer+=' ';\r\n                return this.AnalizeToken();\r\n            }\r\n        }else if(this.IsQuote(currentChar))\r\n        {\r\n            let token= this.CreateQuotedString();\r\n            this.stringBuffer='';\r\n            return token;\r\n        }else if(this.IsParentheses(currentChar))\r\n        {\r\n            if(this.stringBuffer.length>0) {\r\n                this.currentIndex--;\r\n                return this.AnalizeToken();\r\n            }\r\n            else\r\n            {\r\n                if(currentChar=='(')\r\n                    return new Token(TokenType.LParen,'(');\r\n                else\r\n                    return new Token(TokenType.RParen,')');\r\n            }\r\n\r\n        }else if(this.IsSymbol(currentChar))\r\n        {\r\n            if(this.stringBuffer.length>0) {\r\n                this.currentIndex--;\r\n                return this.AnalizeToken();\r\n            }\r\n            else\r\n                return new Token(TokenType.Symbol,currentChar);\r\n        }\r\n        else{\r\n            this.stringBuffer+=currentChar;\r\n            return this.GetNextToken();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private AnalizeToken():Token {\r\n        if(this.stringBuffer.length==0)\r\n            return null;\r\n\r\n        let token:Token={Type:TokenType.Whatever,Value:this.stringBuffer};\r\n        if(this.stringBuffer=='Remote.Get'||this.stringBuffer=='Remote.Post')\r\n            token.Type=TokenType.Method;\r\n        this.stringBuffer=\"\";\r\n        return token;\r\n    }\r\n\r\n    private IsWhiteSpace(currentChar: string) {\r\n        return currentChar==' '||currentChar=='\\r'||currentChar=='\\t'||currentChar=='\\n';\r\n    }\r\n\r\n    private IsQuote(currentChar: string) {\r\n        return currentChar==\"'\"||currentChar==\"\\\"\";\r\n    }\r\n\r\n    private CreateQuotedString() {\r\n        let quote=this.stringToProcess[this.currentIndex];\r\n        this.stringBuffer+=quote;\r\n        this.currentIndex++;\r\n\r\n        while(this.currentIndex<this.stringToProcess.length&&(this.stringToProcess[this.currentIndex]!=quote||this.stringToProcess[this.currentIndex-1]=='\\\\'))\r\n        {\r\n            this.stringBuffer+=this.stringToProcess[this.currentIndex];\r\n            this.currentIndex++;\r\n        }\r\n\r\n        if(this.stringToProcess[this.currentIndex]==quote)\r\n        {\r\n            this.stringBuffer+=quote;\r\n        }\r\n\r\n        return new Token(TokenType.String,this.stringBuffer);\r\n\r\n\r\n    }\r\n\r\n    private IsParentheses(currentChar: string) {\r\n        return currentChar=='('||currentChar==\")\";\r\n    }\r\n\r\n    private IsSymbol(currentChar: string) {\r\n        let symbolList=[',','&','|',';','+','-','/','*'];\r\n        return symbolList.indexOf(currentChar)>=0;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport enum TokenType{\r\n    Method=1,\r\n    Whatever=2,\r\n    Comma=3,\r\n    LParen=4,\r\n    RParen=5,\r\n    String=6,\r\n    Symbol=7\r\n}\n\n\n// WEBPACK FOOTER //\n// ./formBuilder/formula/formulaCompiler/Lexer.ts","import {TokenType} from \"./Lexer\";\r\n\r\nexport class Token{\r\n    constructor(public Type:TokenType,public Value:string)\r\n    {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./formBuilder/formula/formulaCompiler/Token.ts"],"sourceRoot":""}